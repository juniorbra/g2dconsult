{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hvidi\\\\Downloads\\\\CODE\\\\github\\\\g2dconsult\\\\src\\\\components\\\\G2DTable.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../config/supabase';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography, Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function G2DTable() {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  async function fetchData() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('g2dconsult').select('*');\n      if (error) throw error;\n      setData(data || []);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"Carregando dados...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n  if (data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"Nenhum dado encontrado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Get column names from the first row\n  const columns = Object.keys(data[0]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      margin: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Dados G2D Consult\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 650\n        },\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: column\n            }, column, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: data.map((row, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => {\n              var _row$column;\n              return /*#__PURE__*/_jsxDEV(TableCell, {\n                children: (_row$column = row[column]) === null || _row$column === void 0 ? void 0 : _row$column.toString()\n              }, column, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 19\n              }, this);\n            })\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(G2DTable, \"YP7e7Smzxlgf2d3MqLcgRZjo83U=\");\n_c = G2DTable;\nvar _c;\n$RefreshReg$(_c, \"G2DTable\");","map":{"version":3,"names":["useEffect","useState","supabase","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Typography","Box","jsxDEV","_jsxDEV","G2DTable","_s","data","setData","loading","setLoading","fetchData","error","from","select","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","columns","Object","keys","sx","margin","variant","gutterBottom","component","minWidth","map","column","row","index","_row$column","toString","_c","$RefreshReg$"],"sources":["C:/Users/hvidi/Downloads/CODE/github/g2dconsult/src/components/G2DTable.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { supabase } from '../config/supabase'\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableContainer, \n  TableHead, \n  TableRow, \n  Paper,\n  Typography,\n  Box\n} from '@mui/material'\n\nexport default function G2DTable() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  async function fetchData() {\n    try {\n      const { data, error } = await supabase\n        .from('g2dconsult')\n        .select('*')\n\n      if (error) throw error\n      setData(data || [])\n    } catch (error) {\n      console.error('Error fetching data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return <Typography>Carregando dados...</Typography>\n  }\n\n  if (data.length === 0) {\n    return <Typography>Nenhum dado encontrado</Typography>\n  }\n\n  // Get column names from the first row\n  const columns = Object.keys(data[0])\n\n  return (\n    <Box sx={{ margin: 2 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Dados G2D Consult\n      </Typography>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }}>\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell key={column}>{column}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data.map((row, index) => (\n              <TableRow key={index}>\n                {columns.map((column) => (\n                  <TableCell key={column}>{row[column]?.toString()}</TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}